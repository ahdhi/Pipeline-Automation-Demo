pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                // Use Maven to build your code
                sh 'mvn clean package'
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                // Run unit tests
                sh 'npm install' // Example command for Node.js-based tests
                sh 'npm test'     // Example command for running tests
                
                // Run integration tests
                sh 'docker-compose up -d'  // Example command to start test environment
                sh 'run_integration_tests_command'  // Replace with actual integration tests command
            }
        }
        stage('Code Analysis') {
            steps {
                // Integrate a code analysis tool (e.g., SonarQube)
                sh 'sonar-scanner' // Replace with your SonarQube analysis command
            }
        }
        stage('Security Scan') {
            steps {
                // Integrate a security scanning tool (e.g., OWASP ZAP)
                sh 'owasp-zap-scan' // Replace with your OWASP ZAP scan command
            }
        }
        stage('Deploy to Staging') {
            steps {
                // Deploy the application to a staging server (e.g., AWS EC2 instance)
                sh 'deploy_to_staging_script' // Replace with your deployment script
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                // Run integration tests on the staging environment
                sh 'run_integration_tests_on_staging' // Replace with actual staging tests command
            }
        }
        stage('Deploy to Production') {
            steps {
                // Deploy the application to a production server (e.g., AWS EC2 instance)
                sh 'deploy_to_production_script' // Replace with your production deployment script
            }
        }
    }
    post {
        failure {
            // Send notification email on failure
            emailext (
                subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                body: "The pipeline has failed. Please check the logs for details.",
                to: 'your_email@example.com'
            )
            archiveArtifacts 'target/*.jar' // Archive build artifacts
        }
        success {
            // Send notification email on success
            emailext (
                subject: "Pipeline Successful: ${currentBuild.fullDisplayName}",
                body: "The pipeline has succeeded.",
                to: 'your_email@example.com'
            )
            archiveArtifacts 'target/*.jar' // Archive build artifacts
        }
    }
}
