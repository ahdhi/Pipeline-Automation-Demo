pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                script {
                    // Set up Maven
                    def mvnHome = tool name: 'Maven', type: 'hudson.tasks.Maven$MavenInstallation'

                    // Run Maven build
                    sh "${mvnHome}/bin/mvn clean install"
                }
            }
            post {
                success {
                    emailext(
                        subject: "Build Successful",
                        body: "The build stage completed successfully.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
                failure {
                    emailext(
                        subject: "Build Failed",
                        body: "The build stage failed. Check the logs for details.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    // Set up Maven
                    def mvnHome = tool name: 'Maven', type: 'hudson.tasks.Maven$MavenInstallation'

                    // Run Maven tests
                    sh "${mvnHome}/bin/mvn test"
                }
            }
            post {
                success {
                    emailext(
                        subject: "Tests Successful",
                        body: "The tests stage completed successfully.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
                failure {
                    emailext(
                        subject: "Tests Failed",
                        body: "The tests stage failed. Check the logs for details.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    // Set up environment variables or any required configurations
                    def cxScriptPath = '/Users/adhi/Documents/CxConsolePlugin-1.1.26/runCxConsole.sh'

                    // Run the Checkmarx scan
                    sh(script: "${cxScriptPath} scan -v -loc .", returnStatus: true)
                }
            }

            post {
                success {
                    emailext(
                        subject: "Code Analysis Successful",
                        body: "The code analysis stage completed successfully.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
                failure {
                    emailext(
                        subject: "Code Analysis Failed",
                        body: "The code analysis stage failed. Check the logs for details.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
            }
        }

        stage('Security Scan with OWASP ZAP') {
            steps {
                script {
                    // Set up environment variables or any required configurations
                    def zapScriptPath = '/Applications/OWASP ZAP.app/Contents/Java/zap.sh'
                    def githubRepoUrl = 'https://github.com/ahdhi/Pipeline-Automation-Demo'

                    // Run OWASP ZAP scan on the GitHub repository
                    sh(script: "${zapScriptPath} -cmd -quickurl ${githubRepoUrl}", returnStatus: true)
                }
            }
            post {
                success {
                    emailext(
                        subject: "Security Scan Successful",
                        body: "The security scan stage completed successfully.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
                failure {
                    emailext(
                        subject: "Security Scan Failed",
                        body: "The security scan stage failed. Check the logs for details.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    // Set up environment variables and configuration for deploying to your staging server
                    def stagingServer = 'ec2-13-211-229-239.ap-southeast-2.compute.amazonaws.com'
                    def stagingUser = 'ec2-user' // or your AWS instance user
                    def privateKey = credentials('jenkins') // Reference your SSH private key credential
                    def githubRepoUrl = 'https://github.com/ahdhi/Pipeline-Automation-Demo'

                    // SSH into the staging server, clone your GitHub repository, and deploy your application
                    sshagent(['ec2-user']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i ${privateKey} ${stagingUser}@${stagingServer} '
                        git clone ${githubRepoUrl} /var/www/myapp
                        cd /var/www/myapp
                        ./deploy.sh'
                        """
                    }
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                // Example: Run integration tests on staging (replace with your specific commands)
                sh './run_integration_tests_on_staging.sh'
            }
            post {
                success {
                    emailext(
                        subject: "Integration Tests on Staging Successful",
                        body: "The integration tests on staging stage completed successfully.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
                failure {
                    emailext(
                        subject: "Integration Tests on Staging Failed",
                        body: "The integration tests on staging stage failed. Check the logs for details.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                // Example: Deploy to production server (replace with your deployment commands)
                sh './deploy_to_production.sh'
            }
            post {
                success {
                    emailext(
                        subject: "Deployment to Production Successful",
                        body: "The deployment to production stage completed successfully.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
                failure {
                    emailext(
                        subject: "Deployment to Production Failed",
                        body: "The deployment to production stage failed. Check the logs for details.",
                        to: "personal.adhithyan@gmail.com",
                        attachLog: true,
                    )
                }
            }
        }
    }

    post {
        success {
            emailext(
                subject: "Pipeline Successful",
                body: "The Jenkins pipeline completed successfully.",
                to: "personal.adhithyan@gmail.com",
                attachLog: true,
            )
        }
        failure {
            emailext(
                subject: "Pipeline Failed",
                body: "The Jenkins pipeline failed. Check the logs for details.",
                to: "personal.adhithyan@gmail.com",
                attachLog: true,
            )
        }
    }
}
